{"version":3,"file":"static/js/482.6521ae7b.chunk.js","mappings":"0IAqCA,IA9BgB,SAAH,GAA4B,IAAtBA,EAAO,EAAPA,QAMjB,OALAC,EAAAA,EAAAA,YAAU,WACKC,SAASC,KAAKC,MAAMC,SAA7BL,EAAwC,SACR,MACtC,GAAG,CAACA,KAGF,SAAC,WAAc,UACZA,IACC,gBACEI,MAAO,CACLE,SAAU,QACVC,IAAK,EACLC,KAAM,EACNC,MAAO,OACPC,OAAQ,OACRC,OAAQ,IACRC,WAAY,QACZ,UAEF,iBAAKC,UAAU,eAAc,WAC3B,gBAAKC,IAAKC,EAAMC,IAAI,eACpB,iBAAMH,UAAU,iBAM5B,C,6zBCUA,EAjCmB,SAAH,GAAkD,IAA5CI,EAAK,EAALA,MAAOC,EAAK,EAALA,MAAOC,EAAQ,EAARA,SAAUC,EAAK,EAALA,MACtCC,GAAWC,EAAAA,EAAAA,MACjB,OACE,+BACE,qBACET,UACEO,EAAQ,+BAAiC,wBAC1C,WAED,SAAC,KAAI,CAACG,GAAG,IAAG,6BACZ,gBAAKT,IAAKU,EAAYR,IAAI,GAAGP,MAAM,KAAKC,OAAO,OAC9CO,IAAUC,IAAS,0BAAOD,IAC1BA,GAASC,IACR,UAAC,WAAc,YACb,2BACE,cACEO,QAAS,WACOJ,EAAVF,IACW,EACjB,EAAE,SAEDF,OAGL,gBAAKH,IAAKU,EAAYR,IAAI,GAAGP,MAAM,KAAKC,OAAO,QAC/C,0BAAOQ,WAMnB,C,6FCcA,UAhDkB,WAChB,IAAMQ,GAAWC,EAAAA,EAAAA,MAEjB,GAA8BC,EAAAA,EAAAA,UAAsB,CAAEC,QAAS,KAAK,eAA7DC,EAAO,KAAEC,EAAU,KAC1B,GAA8BH,EAAAA,EAAAA,WAAkB,GAAK,eAA9C5B,EAAO,KAAEgC,EAAU,MAE1B/B,EAAAA,EAAAA,YAAU,WACRgC,GACF,GAAG,IAEH,IAAMA,EAAU,WACd,IAAIC,EAAS,CACXC,OAAQC,KAAKC,UAAU,CAAEC,OAAQ,EAAGC,UAAW,EAAGC,WAAY,IAC9DC,MAAOL,KAAKC,UAAU,CAAC,EAAG,IAC1BK,KAAMN,KAAKC,UAAU,CAAC,YAAa,SACnCM,WAAY,oBAGdjB,EAAS,CACPkB,KAAM,gBACNC,QAASX,EACTY,SAAU,SAACC,GAET,GADAf,GAAW,GACJ,OAAHe,QAAG,IAAHA,GAAAA,EAAKC,QAAS,CAChB,IACaC,EACTF,EADFG,QAAWD,KAEblB,EAAe,OAAJkB,QAAI,IAAJA,OAAI,EAAJA,EAAO,GACpB,CACF,GAEJ,EACA,OACE,iCACE,SAAC,IAAU,CAAChC,MAAc,OAAPa,QAAO,IAAPA,OAAO,EAAPA,EAASqB,SAC5B,qBAAStC,UAAU,2BAA0B,WAC3C,eAAIA,UAAU,aAAY,SAAS,OAAPiB,QAAO,IAAPA,OAAO,EAAPA,EAASqB,SACrC,gBAAKtC,UAAU,UAAS,UACtB,gBAAKA,UAAU,eAAc,UAC3B,gBAAKuC,wBAAyB,CAAEC,OAAe,OAAPvB,QAAO,IAAPA,OAAO,EAAPA,EAASD,mBAIvD,SAAC,IAAO,CAAC7B,QAASA,MAGxB,C","sources":["components/Extended/Loading.tsx","layout/MewShop/BreadCrumb.tsx","pages/MewShop/Introduce/index.tsx"],"sourcesContent":["import React, { useEffect } from \"react\";\r\nimport logo from \"static/MewShop/images/home/logo.png\";\r\n\r\ninterface Props {\r\n  loading: boolean;\r\n}\r\n\r\nconst Loading = ({ loading }: Props) => {\r\n  useEffect(() => {\r\n    if (loading) document.body.style.overflow = \"hidden\";\r\n    else document.body.style.overflow = \"auto\";\r\n  }, [loading]);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {loading && (\r\n        <div\r\n          style={{\r\n            position: \"fixed\",\r\n            top: 0,\r\n            left: 0,\r\n            width: \"100%\",\r\n            height: \"100%\",\r\n            zIndex: 100000,\r\n            background: \"#fff\",\r\n          }}\r\n        >\r\n          <div className=\"loading__box\">\r\n            <img src={logo} alt=\"logo page\" />\r\n            <span className=\"loader\"></span>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Loading;\r\n","/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport React from \"react\";\r\nimport { Link, useNavigate } from \"react-router-dom\";\r\nimport rightArraw from \"static/MewShop/images/home/right-arrow.png\";\r\n\r\ninterface Props {\r\n  node1?: string;\r\n  node2?: string;\r\n  urlNode1?: any;\r\n  type2?: boolean;\r\n}\r\n\r\nconst BreadCrumb = ({ node1, node2, urlNode1, type2 }: Props) => {\r\n  const navigate = useNavigate();\r\n  return (\r\n    <>\r\n      <section\r\n        className={\r\n          type2 ? \"bread_crumb type_2 container\" : \"bread_crumb container\"\r\n        }\r\n      >\r\n        <Link to=\"/\">Trang chá»§</Link>\r\n        <img src={rightArraw} alt=\"\" width=\"12\" height=\"12\" />\r\n        {node1 && !node2 && <span>{node1}</span>}\r\n        {node1 && node2 && (\r\n          <React.Fragment>\r\n            <span>\r\n              <a\r\n                onClick={() => {\r\n                  if (urlNode1) navigate(urlNode1);\r\n                  else navigate(-1);\r\n                }}\r\n              >\r\n                {node1}\r\n              </a>\r\n            </span>\r\n            <img src={rightArraw} alt=\"\" width=\"12\" height=\"12\" />\r\n            <span>{node2}</span>\r\n          </React.Fragment>\r\n        )}\r\n      </section>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default BreadCrumb;\r\n","// THIRD IMPORT\r\nimport { useState, useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\n\r\n// TYPES IMPORT\r\nimport { ArticleType } from 'types/articles';\r\nimport BreadCrumb from 'layout/MewShop/BreadCrumb';\r\nimport Loading from 'components/Extended/Loading';\r\n\r\nconst Introduce = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const [article, setArticle] = useState<ArticleType>({ content: '' });\r\n  const [loading, setLoading] = useState<boolean>(true);\r\n\r\n  useEffect(() => {\r\n    getList();\r\n  }, []);\r\n\r\n  const getList = () => {\r\n    let params = {\r\n      filter: JSON.stringify({ status: 1, websiteId: 1, categoryId: 3 }),\r\n      range: JSON.stringify([0, 1]),\r\n      sort: JSON.stringify(['createdAt', 'DESC']),\r\n      attributes: 'id,title,content'\r\n    };\r\n\r\n    dispatch({\r\n      type: 'article/fetch',\r\n      payload: params,\r\n      callback: (res) => {\r\n        setLoading(false);\r\n        if (res?.success) {\r\n          const {\r\n            results: { list }\r\n          } = res;\r\n          setArticle(list?.[0]);\r\n        }\r\n      }\r\n    });\r\n  };\r\n  return (\r\n    <>\r\n      <BreadCrumb node1={article?.title} />\r\n      <section className=\"introduce_page container\">\r\n        <h1 className=\"page_title\">{article?.title}</h1>\r\n        <div className=\"content\">\r\n          <div className=\"descriptions\">\r\n            <div dangerouslySetInnerHTML={{ __html: article?.content }} />\r\n          </div>\r\n        </div>\r\n      </section>\r\n      <Loading loading={loading} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Introduce;\r\n"],"names":["loading","useEffect","document","body","style","overflow","position","top","left","width","height","zIndex","background","className","src","logo","alt","node1","node2","urlNode1","type2","navigate","useNavigate","to","rightArraw","onClick","dispatch","useDispatch","useState","content","article","setArticle","setLoading","getList","params","filter","JSON","stringify","status","websiteId","categoryId","range","sort","attributes","type","payload","callback","res","success","list","results","title","dangerouslySetInnerHTML","__html"],"sourceRoot":""}